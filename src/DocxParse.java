import javax.xml.namespace.QName;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import java.io.IOException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –ü–∞—Ä—Å–µ—Ä .docx-—Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º.
 * –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
 * 1. –°—Ç—Ä–æ–∫–∞ —Å —Ç–∞–π–º–∫–æ–¥–æ–º: "—Ü–∏—Ñ—Ä–∞:—Ü–∏—Ñ—Ä–∞"
 * 2. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * 3. –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä–µ–ø–ª–∏–∫–∞ (—Å—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞)
 */
public class DocxParse {

    public static final String DEFAULT_FILE_NAME = "–î—å—è–≤–æ–ª—å—Å–∫–∏–π —Å—É–¥—å—è 1.13.docx";
    public static final String INPUT_DIR = "files";

    // –°–ª–æ–≤–∞/—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ
    private static final Set<String> EXCEPTION_WORDS = Set.of(
            "(–∑/–∫)", "(—Å/—Ö)", "/", " ", ""
    );

    public static void main(String[] args) throws Exception {
        String fileName = args.length > 0 ? args[0] : DEFAULT_FILE_NAME;
        Path docxPath = Paths.get(INPUT_DIR, fileName);

        if (!Files.exists(docxPath)) {
            System.err.println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + docxPath.toAbsolutePath());
            return;
        }

        try {
            List<String> paragraphs = extractParagraphs(docxPath);
            Map<String, MovieCharacter> characterStats = parseScript(paragraphs);
            printResults(characterStats);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏–∑ document.xml –≤–Ω—É—Ç—Ä–∏ .docx-—Ñ–∞–π–ª–∞.
     */
    private static List<String> extractParagraphs(Path docxPath) throws Exception {
        try (FileSystem fs = FileSystems.newFileSystem(docxPath)) {
            Path documentXml = fs.getPath("/word/document.xml");
            try (XMLEventReader reader = XMLInputFactory.newInstance()
                    .createXMLEventReader(Files.newInputStream(documentXml))) {

                List<String> paragraphs = new ArrayList<>();
                StringBuilder currentParagraph = new StringBuilder();
                boolean inParagraph = false;

                while (reader.hasNext()) {
                    XMLEvent event = reader.nextEvent();

                    if (event.isStartElement()) {
                        StartElement startElement = event.asStartElement();
                        if ("p".equalsIgnoreCase(startElement.getName().getLocalPart())) {
                            inParagraph = true;
                            currentParagraph.setLength(0); // –æ—á–∏—â–∞–µ–º
                        }
                    } else if (event.isCharacters() && inParagraph) {
                        currentParagraph.append(event.asCharacters().getData());
                    } else if (event.isEndElement()) {
                        EndElement endElement = event.asEndElement();
                        if ("p".equalsIgnoreCase(endElement.getName().getLocalPart())) {
                            inParagraph = false;
                            String text = currentParagraph.toString().trim();
                            if (!text.isEmpty()) {
                                paragraphs.add("<p>" + text + "</p>");
                            }
                        }
                    }
                }
                return paragraphs;
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º.
     */
    private static Map<String, MovieCharacter> parseScript(List<String> paragraphs) {
        Map<String, MovieCharacter> characters = new HashMap<>();
        int phase = 1; // 1: –∂–¥—ë–º —Ç–∞–π–º–∫–æ–¥, 2: –∂–¥—ë–º –∏–º—è, 3: —Å—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞
        String currentCharacterName = null;

        for (String paragraph : paragraphs) {
            String cleanText = extractTextContent(paragraph);

            switch (phase) {
                case 1:
                    if (hasTimestampFormat(cleanText)) {
                        phase = 2;
                    }
                    break;

                case 2:
                    currentCharacterName = cleanText;
                    if (currentCharacterName != null && !currentCharacterName.isEmpty()) {
                        phase = 3;
                    } else {
                        phase = 1; // —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ
                    }
                    break;

                case 3:
                    int wordCount = countWords(cleanText);
                    characters.computeIfAbsent(currentCharacterName, MovieCharacter::new)
                              .addWords(wordCount);
                    phase = 1; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É —Ç–∞–π–º–∫–æ–¥–∞
                    break;
            }
        }

        return characters;
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ç–µ–≥–∏ <p> –∏ </p> –∏–∑ —Å—Ç—Ä–æ–∫–∏.
     */
    private static String extractTextContent(String paragraphTag) {
        if (paragraphTag == null) return "";
        return paragraphTag.replaceAll("^<p>", "")
                           .replaceAll("</p>$", "")
                           .trim();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É "—Ü–∏—Ñ—Ä–∞:—Ü–∏—Ñ—Ä–∞".
     */
    private static boolean hasTimestampFormat(String text) {
        if (text == null || text.length() < 3) return false;
        int colonIndex = text.indexOf(':');
        if (colonIndex <= 0 || colonIndex >= text.length() - 1) return false;
        return Character.isDigit(text.charAt(colonIndex - 1)) &&
               Character.isDigit(text.charAt(colonIndex + 1));
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞.
     */
    private static int countWords(String text) {
        if (text == null || text.trim().isEmpty()) return 0;

        return Arrays.stream(text.trim().split("\\s+"))
                     .filter(word -> !EXCEPTION_WORDS.contains(word))
                     .collect(Collectors.toList())
                     .size();
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å.
     */
    private static void printResults(Map<String, MovieCharacter> stats) {
        if (stats.isEmpty()) {
            System.out.println("–ù–∏ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        System.out.println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º:");
        System.out.println("============================");
        stats.values().stream()
             .sorted((a, b) -> Integer.compare(b.getWords(), a.getWords())) // –ø–æ —É–±—ã–≤–∞–Ω–∏—é
             .forEach(System.out::println);
    }
}

//–ê–ª–≥–æ—Ä–∏—Ç–º
// –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ü–∏—Ñ—Ä–∞ + ":" + —Ü–∏—Ñ—Ä–∞
// –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏–º—è
// —Ç—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - —Å—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º - –∏—Å–∫–ª—é—á–µ–Ω–∏—è
